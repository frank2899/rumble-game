{"version":3,"file":"static/js/52.e7264b27.chunk.js","mappings":"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","sources":["components/Tiles/types.js","components/Tiles/index.jsx","utils/generate.rumble.js","hooks/useGeneratedRumble.js","hooks/useInputWords.js","state/letters/hook.js","views/Home.jsx"],"sourcesContent":["import PropTypes from 'prop-types'\n\nexport const types = {\n    data: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n}\n","import { EraserFill, XLg } from 'react-bootstrap-icons'\nimport styled from 'styled-components'\nimport useGeneratedRumble from '../../hooks/useGeneratedRumble'\nimport useInputField from '../../hooks/useInputWords'\nimport useTheme from '../../hooks/useTheme'\nimport { types } from './types'\n\nexport const CustomWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n`\nexport const TilesWrapper = styled.div`\n    display: flex;\n    gap: 5px;\n    border-radius: 0.5rem;\n    flex-wrap: wrap;\n    justify-content: center;\n    margin-bottom: 2em;\n    margin-top: 1.5em;\n`\n\nexport const Tile = styled.div`\n    padding : 15px;\n    border-radius : .8rem;\n    width : ${({ width }) => width || '80px'};\n    height : ${({ height }) => height || '80px'};\n    display : flex;\n    align-items : center;\n    justify-content : center;\n    text-align-center;\n    border : 2px solid ${({ theme }) => theme.primary};\n    background-color : ${({ theme }) => theme.background};\n    color : ${({ theme }) => theme.text};\n    ${({ fontSize }) => `font-size : ${fontSize};`}\n    font-weight : bolder;\n    // transition : all .3s ease;\n    cursor : pointer;\n    user-select: none;\n    box-shadow : 0px 0px 10px -4px ${({ theme }) => theme.primary};\n    font-family: 'Archivo Black', sans-serif;\n\n    ${({ selected, theme }) =>\n        selected &&\n        `\n        background-color : ${theme.orange};\n        color : ${theme.text};\n        box-shadow : inset 0 0 5px 3px rgba(0,0,0,0.2),\n        0px 0px 10px -4px ${theme.primary};\n        `}\n\n    &:hover{\n        background-color : ${({ theme }) => theme.orange};\n        color : ${({ theme }) => theme.text};\n        box-shadow : inset 0 0 5px 5px rgba(0,0,0,0.2),\n        0px 0px 10px -4px ${({ theme }) => theme.primary};\n    }\n`\n\nconst TextTiles = (props) => {\n    const { generatedLetters } = useGeneratedRumble()\n    const { inputWords, setInputWords } = useInputField()\n    const { theme } = useTheme()\n\n    const isSelected = (letter) => {\n        return inputWords.indexOf(letter) !== -1 ? true : false\n    }\n\n    return generatedLetters?.length ? (\n        <CustomWrapper {...props}>\n            <TilesWrapper>\n                {generatedLetters?.map((e, i) => (\n                    <Tile\n                        key={i}\n                        {...props}\n                        onClick={() => setInputWords(`${inputWords}${e}`)}\n                        selected={isSelected(e)}\n                    >\n                        {e}\n                    </Tile>\n                ))}\n                <Tile\n                    onClick={() => setInputWords('')}\n                    data-tut=\"reactour__eraser\"\n                >\n                    <EraserFill\n                        style={{\n                            color: theme.text,\n                            fontSize: '1.5em',\n                        }}\n                    />\n                </Tile>\n                <Tile\n                    onClick={() => setInputWords(inputWords.replace(/.$/, ''))}\n                    data-tut=\"reactour__eraser\"\n                >\n                    <XLg\n                        style={{\n                            color: theme.text,\n                            fontSize: '1.5em',\n                        }}\n                    />\n                </Tile>\n            </TilesWrapper>\n        </CustomWrapper>\n    ) : (\n        ''\n    )\n}\n\nTextTiles.propTypes = types\n\nexport default TextTiles\n","import randomWords from 'random-words'\n\nexport const REQUIRED_LENGTH = 10\n\nexport const generateWord = randomWords({\n    exactly: 1,\n    formatter: (word) => word.toUpperCase(),\n})\n\nexport const randomLetters = (counts) => {\n    let text = ''\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n    for (let i = 0; i < counts; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length))\n\n    return text\n}\n\nexport const jumbleRumbleLetters = () => {\n    let toShuffle = generateWord[0]\n\n    if (REQUIRED_LENGTH - toShuffle.length > 0)\n        toShuffle =\n            toShuffle + randomLetters(REQUIRED_LENGTH - toShuffle.length)\n\n    return toShuffle?.split('')?.sort(() => {\n        return Math.random() - 0.5\n    })\n}\n","import { useGeneratedText } from '../state/letters/hook'\nimport { jumbleRumbleLetters } from '../utils/generate.rumble'\n\nconst useGeneratedRumble = () => {\n    const [generatedLetters, setGeneratedLetters] = useGeneratedText()\n\n    const createJumbleLetters = () => setGeneratedLetters(jumbleRumbleLetters())\n\n    return { generatedLetters, setGeneratedLetters, createJumbleLetters }\n}\n\nexport default useGeneratedRumble\n","import { useInputWords } from '../state/letters/hook'\n\nconst useInputField = () => {\n    const [inputWords, setInputWords] = useInputWords()\n\n    return { inputWords, setInputWords }\n}\n\nexport default useInputField\n","import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    updateGeneratedLetters as updateGeneratedLettersAction,\n    updateInputWords as updateInputWordsAction,\n    updateValidGuess as updateValidGuessAction,\n    updatePoints as updatePointsAction,\n    resetValidGuess as resetValidGuessAction,\n} from './action'\n\nexport const useGeneratedText = () => {\n    const dispatch = useDispatch()\n    const generatedLetters = useSelector(\n        (state) => state.letters.generatedLetters,\n    )\n\n    const setGeneratedLetters = useCallback(\n        (newGeneratedLetters) => {\n            let letter = () => {\n                if (typeof newGeneratedLetters === 'string')\n                    return newGeneratedLetters.split('')\n                if (typeof newGeneratedLetters === 'object')\n                    return newGeneratedLetters\n\n                return []\n            }\n\n            dispatch(\n                updateGeneratedLettersAction({ newGeneratedLetters: letter() }),\n            )\n        },\n        [dispatch],\n    )\n\n    return [generatedLetters, setGeneratedLetters]\n}\n\nexport const useInputWords = () => {\n    const dispatch = useDispatch()\n    const inputWords = useSelector((state) => state.letters.inputWords)\n\n    const setInputWords = useCallback(\n        (newInputWords) => {\n            dispatch(updateInputWordsAction({ newInputWords }))\n        },\n        [dispatch],\n    )\n\n    return [inputWords, setInputWords]\n}\n\nexport const useValidGuess = () => {\n    const dispatch = useDispatch()\n    const allValidGuess = useSelector((state) => state.letters.validGuess)\n\n    const setValidGuess = useCallback(\n        (newValidGuess) => {\n            dispatch(updateValidGuessAction({ newValidGuess }))\n        },\n        [dispatch],\n    )\n\n    const resetValidGuess = useCallback(() => {\n        dispatch(resetValidGuessAction())\n    }, [dispatch])\n\n    return [allValidGuess, setValidGuess, resetValidGuess]\n}\n\nexport const usePoints = () => {\n    const dispatch = useDispatch()\n    const points = useSelector((state) => state.letters.points)\n\n    const updatePoints = useCallback(\n        (action) => {\n            dispatch(updatePointsAction({ action }))\n        },\n        [dispatch],\n    )\n\n    return [points, updatePoints]\n}\n","import styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Tile } from '../components/Tiles'\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 80vh;\n`\n\nconst Section = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`\n\nconst Home = (props) => {\n    return (\n        <Wrapper>\n            <Section>\n                <center>\n                    <Link\n                        to=\"/rumble-game/play\"\n                        className=\"text-decoration-none\"\n                    >\n                        <Tile width=\"200px\">PLAY RUMBLE</Tile>\n                    </Link>\n                </center>\n            </Section>\n        </Wrapper>\n    )\n}\n\nexport default Home\n"],"names":["PropTypes","CustomWrapper","styled","TilesWrapper","Tile","width","height","theme","primary","background","text","fontSize","selected","orange","props","generatedLetters","useGeneratedRumble","useInputField","inputWords","setInputWords","useTheme","length","map","e","i","onClick","letter","indexOf","style","color","replace","generateWord","randomWords","exactly","formatter","word","toUpperCase","jumbleRumbleLetters","toShuffle","counts","possible","charAt","Math","floor","random","randomLetters","split","sort","useGeneratedText","setGeneratedLetters","createJumbleLetters","useInputWords","dispatch","useDispatch","useSelector","state","letters","useCallback","newGeneratedLetters","updateGeneratedLettersAction","newInputWords","updateInputWordsAction","useValidGuess","validGuess","newValidGuess","updateValidGuessAction","resetValidGuessAction","usePoints","points","action","updatePointsAction","Wrapper","Section","to","className"],"sourceRoot":""}